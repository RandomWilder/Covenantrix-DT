name: Build and Release

on:
  push:
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: win
            python_url: https://www.python.org/ftp/python/3.11.6/python-3.11.6-embed-amd64.zip
            python_exe: python.exe
          - os: macos-latest
            platform: mac
            python_exe: bin/python3
            
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: covenantrix-desktop/package-lock.json
      
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install frontend dependencies
        working-directory: covenantrix-desktop
        run: npm ci
      
      # === PYTHON DISTRIBUTION (WINDOWS) ===
      
      - name: Create Python Distribution (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          set -e
          echo "Creating Windows Python distribution..."
          mkdir -p dist/python-dist
          
          echo "Downloading embedded Python..."
          curl -L -o python-embed.zip ${{ matrix.python_url }} || exit 1
          
          echo "Extracting Python..."
          unzip -q python-embed.zip -d dist/python-dist/ || exit 1
          
          if [ ! -f "dist/python-dist/python.exe" ]; then
            echo "ERROR: Python executable not found after extraction"
            exit 1
          fi
          
          echo "Configuring Python paths..."
          cat > dist/python-dist/python311._pth << 'EOF'
          python311.zip
          .
          ./Lib
          ./Lib/site-packages
          import site
          EOF
          
          mkdir -p dist/python-dist/Lib/site-packages
          
          echo "Installing pip..."
          curl -L https://bootstrap.pypa.io/get-pip.py -o get-pip.py || exit 1
          dist/python-dist/python.exe get-pip.py --no-warn-script-location || exit 1
          
          echo "Installing packages..."
          dist/python-dist/python.exe -m pip install --upgrade pip setuptools wheel || exit 1
          dist/python-dist/python.exe -m pip install -r backend/requirements.txt || exit 1
          
          echo "Windows Python distribution created successfully"
          
      # === PYTHON DISTRIBUTION (MACOS) ===
      
      - name: Create Python Distribution (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          echo "Creating macOS Python distribution..."
          
          # Use Python 3.11 specifically (installed by setup-python action)
          python3.11 -m venv dist/python-dist || exit 1
          source dist/python-dist/bin/activate
          
          echo "Upgrading pip..."
          pip install --upgrade pip setuptools wheel || exit 1
          
          echo "Installing packages (preferring binary wheels)..."
          pip install -r backend/requirements.txt --prefer-binary || exit 1
          
          # Verify PyMuPDF installed correctly
          python -c "import fitz; print(f'PyMuPDF version: {fitz.__version__}')" || exit 1
          
          ln -sf python3 dist/python-dist/bin/python
          
          echo "macOS Python distribution created successfully"
      
      # === VERIFICATION ===
      
      - name: Verify Python Distribution
        shell: bash
        run: |
          echo "=== Verifying Python Distribution ==="
          
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            PYTHON_CMD="dist/python-dist/python.exe"
          else
            PYTHON_CMD="dist/python-dist/bin/python"
          fi
          
          echo "Python version:"
          $PYTHON_CMD --version || exit 1
          
          echo "Testing package imports..."
          $PYTHON_CMD -c "import fastapi; print('FastAPI OK')" || exit 1
          $PYTHON_CMD -c "import uvicorn; print('Uvicorn OK')" || exit 1
          $PYTHON_CMD -c "import pydantic; print('Pydantic OK')" || exit 1
          $PYTHON_CMD -c "import openai; print('OpenAI OK')" || exit 1
          
          echo "Testing PyMuPDF (critical for OCR)..."
          $PYTHON_CMD -c "import fitz; print('PyMuPDF OK')" || exit 1
          $PYTHON_CMD -c "from google.cloud import vision; print('Google Vision OK')" || exit 1
          
          echo "All imports successful"
      
      - name: Install libmagic (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "Installing libmagic for file type detection..."
          brew install libmagic || exit 1
          echo "libmagic installed successfully"
      
      - name: Test Backend
        shell: bash
        run: |
          echo "=== Testing Backend ==="
          
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            PYTHON_CMD="dist/python-dist/python.exe"
          else
            PYTHON_CMD="dist/python-dist/bin/python"
          fi
          
          cd backend
          ../$PYTHON_CMD main.py &
          BACKEND_PID=$!
          cd ..
          
          echo "Backend started with PID: $BACKEND_PID"
          
          for i in {1..30}; do
            if curl -s http://127.0.0.1:8000/health > /dev/null 2>&1; then
              echo "Backend is responding"
              break
            fi
            echo "Waiting for backend... ($i/30)"
            sleep 2
          done
          
          curl -f http://127.0.0.1:8000/health || exit 1
          
          kill $BACKEND_PID || true
          sleep 2
          
          echo "Backend test passed"
      
      # === BUILD ELECTRON ===
      
      - name: Build Electron App
        working-directory: covenantrix-desktop
        run: npm run package:${{ matrix.platform }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: List Build Output
        shell: bash
        run: |
          echo "=== Build Output ==="
          ls -la covenantrix-desktop/dist/release/ || echo "No release directory"
          find covenantrix-desktop/dist/release/ -type f \( -name "*.exe" -o -name "*.dmg" \) || echo "No installers"
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: covenantrix-${{ matrix.platform }}
          path: |
            covenantrix-desktop/dist/release/*.exe
            covenantrix-desktop/dist/release/*.dmg
            covenantrix-desktop/dist/release/latest*.yml
          retention-days: 30
          if-no-files-found: error

  # === RELEASE ===
  
  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: Prepare Release Files
        run: |
          mkdir -p release-files
          find artifacts/ -name "*.exe" -exec cp {} release-files/ \;
          find artifacts/ -name "*.dmg" -exec cp {} release-files/ \;
          find artifacts/ -name "latest*.yml" -exec cp {} release-files/ \;
          ls -la release-files/
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-files/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}