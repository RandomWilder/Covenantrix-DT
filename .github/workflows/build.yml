name: Build and Release

on:
  push:
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: win
            python_url: https://www.python.org/ftp/python/3.11.6/python-3.11.6-embed-amd64.zip
            python_exe: python.exe
          - os: macos-latest
            platform: mac
            python_exe: bin/python3
            
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: covenantrix-desktop/package-lock.json
      
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install frontend dependencies
        working-directory: covenantrix-desktop
        run: npm ci
      
      # === PYTHON DISTRIBUTION (WINDOWS) ===
      
      - name: Create Python Distribution (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          set -e
          echo "Creating Windows Python distribution..."
          mkdir -p dist/python-dist
          
          echo "Downloading embedded Python..."
          curl -L -o python-embed.zip ${{ matrix.python_url }} || exit 1
          
          echo "Extracting Python..."
          unzip -q python-embed.zip -d dist/python-dist/ || exit 1
          
          if [ ! -f "dist/python-dist/python.exe" ]; then
            echo "ERROR: Python executable not found after extraction"
            exit 1
          fi
          
          echo "Configuring Python paths..."
          cat > dist/python-dist/python311._pth << 'EOF'
          python311.zip
          .
          ./Lib
          ./Lib/site-packages
          import site
          EOF
          
          mkdir -p dist/python-dist/Lib/site-packages
          
          echo "Installing pip..."
          curl -L https://bootstrap.pypa.io/get-pip.py -o get-pip.py || exit 1
          dist/python-dist/python.exe get-pip.py --no-warn-script-location || exit 1
          
          echo "Installing packages..."
          dist/python-dist/python.exe -m pip install --upgrade pip setuptools wheel || exit 1
          dist/python-dist/python.exe -m pip install -r backend/requirements.txt || exit 1
          
          echo "Windows Python distribution created successfully"
          
      # === PYTHON DISTRIBUTION (MACOS) ===
      
      - name: Create Python Distribution (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          echo "Creating macOS Python distribution..."
          
          # Detect architecture
          ARCH=$(uname -m)
          if [ "$ARCH" = "arm64" ] || [ "$ARCH" = "aarch64" ]; then
            PYTHON_ARCH="aarch64"
          else
            PYTHON_ARCH="x86_64"
          fi
          
          echo "Downloading Python standalone build for macOS (${PYTHON_ARCH})..."
          curl -L -o python-macos.tar.gz "https://github.com/indygreg/python-build-standalone/releases/download/20231002/cpython-3.11.6+20231002-${PYTHON_ARCH}-apple-darwin-install_only.tar.gz" || exit 1
          
          echo "Extracting Python..."
          mkdir -p dist/python-dist
          tar -xzf python-macos.tar.gz -C dist/python-dist --strip-components=1 || exit 1
          
          echo "Extracted contents:"
          ls -la dist/python-dist/
          
          echo "Installing pip..."
          curl -L https://bootstrap.pypa.io/get-pip.py -o get-pip.py || exit 1
          dist/python-dist/bin/python3 get-pip.py || exit 1
          
          echo "Installing packages..."
          dist/python-dist/bin/python3 -m pip install -r backend/requirements.txt || exit 1
          
          # Verify PyMuPDF installed correctly
          dist/python-dist/bin/python3 -c "import fitz; print(f'PyMuPDF version: {fitz.__version__}')" || exit 1
          
          ln -sf python3 dist/python-dist/bin/python
          echo "Created python symlink"
          
          echo "macOS Python distribution created successfully"
      
      # === VERIFICATION ===
      
      - name: Verify Python Distribution
        shell: bash
        run: |
          echo "=== Verifying Python Distribution ==="
          
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            PYTHON_CMD="dist/python-dist/python.exe"
          else
            PYTHON_CMD="dist/python-dist/bin/python"
          fi
          
          echo "Python version:"
          $PYTHON_CMD --version || exit 1
          
          echo "Testing package imports..."
          $PYTHON_CMD -c "import fastapi; print('FastAPI OK')" || exit 1
          $PYTHON_CMD -c "import uvicorn; print('Uvicorn OK')" || exit 1
          $PYTHON_CMD -c "import pydantic; print('Pydantic OK')" || exit 1
          $PYTHON_CMD -c "import openai; print('OpenAI OK')" || exit 1
          
          echo "Testing PyMuPDF (critical for OCR)..."
          $PYTHON_CMD -c "import fitz; print('PyMuPDF OK')" || exit 1
          $PYTHON_CMD -c "from google.cloud import vision; print('Google Vision OK')" || exit 1
          
          echo "All imports successful"
      
      - name: Install and Bundle libmagic (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          echo "Installing libmagic for file type detection..."
          brew install libmagic
          
          echo "Creating directories..."
          mkdir -p dist/lib
          mkdir -p dist/share/misc
          
          echo "Copying libmagic libraries..."
          if [ -d "/opt/homebrew/lib" ]; then
            cp /opt/homebrew/lib/libmagic.* dist/lib/ || exit 1
            MAGIC_SRC="/opt/homebrew/share/misc"
          else
            cp /usr/local/lib/libmagic.* dist/lib/ || exit 1
            MAGIC_SRC="/usr/local/share/misc"
          fi
          
          echo "Copying magic database files..."
          if [ -f "$MAGIC_SRC/magic.mgc" ]; then
            cp "$MAGIC_SRC/magic.mgc" dist/share/misc/ || exit 1
            echo "Copied magic.mgc"
          elif [ -f "$MAGIC_SRC/magic" ]; then
            cp "$MAGIC_SRC/magic" dist/share/misc/ || exit 1
            echo "Copied magic (uncompiled)"
          else
            echo "ERROR: Could not find magic database at $MAGIC_SRC"
            exit 1
          fi
          
          echo "Verifying bundled files:"
          echo "Libraries:"
          ls -lh dist/lib/libmagic.*
          echo ""
          echo "Magic database:"
          ls -lh dist/share/misc/
          
          echo "libmagic bundled successfully"
      
      - name: Test Backend
        shell: bash
        run: |
          echo "=== Testing Backend ==="
          
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            PYTHON_CMD="dist/python-dist/python.exe"
          else
            PYTHON_CMD="dist/python-dist/bin/python"
          fi
          
          cd backend
          ../$PYTHON_CMD main.py &
          BACKEND_PID=$!
          cd ..
          
          echo "Backend started with PID: $BACKEND_PID"
          
          for i in {1..30}; do
            if curl -s http://127.0.0.1:8000/health > /dev/null 2>&1; then
              echo "Backend is responding"
              break
            fi
            echo "Waiting for backend... ($i/30)"
            sleep 2
          done
          
          curl -f http://127.0.0.1:8000/health || exit 1
          
          kill $BACKEND_PID || true
          sleep 2
          
          echo "Backend test passed"
      
      - name: Inject Production API Keys
        shell: bash
        run: |
          echo "=== Injecting Production API Keys ==="
          cat > backend/.env << 'EOF'
          OPENAI_API_KEY=${{ secrets.PROD_OPENAI_API_KEY }}
          COHERE_API_KEY=${{ secrets.PROD_COHERE_API_KEY }}
          GOOGLE_API_KEY=${{ secrets.PROD_GOOGLE_API_KEY }}
          GOOGLE_CLIENT_ID=${{ secrets.PROD_GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.PROD_GOOGLE_CLIENT_SECRET }}
          ENVIRONMENT=production
          EOF
          echo "Production .env file created successfully"
      
      # === BUILD ELECTRON ===
      
      - name: Build Electron App (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: covenantrix-desktop
        run: npm run package:${{ matrix.platform }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build Electron App (macOS)
        if: matrix.os == 'macos-latest'
        working-directory: covenantrix-desktop
        run: npm run package:${{ matrix.platform }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # macOS Code Signing & Notarization
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          
      - name: Verify DMG Contents (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          echo "=== Verifying macOS DMG Contents ==="
          DMG_PATH=$(find covenantrix-desktop/dist/release -name "*.dmg" -type f | head -n 1)
          
          if [ -z "$DMG_PATH" ]; then
            echo "⚠️ WARNING: No DMG found - skipping verification"
            exit 0
          fi
          
          echo "Found DMG: $DMG_PATH"
          
          # Mount DMG
          if ! hdiutil attach "$DMG_PATH" -mountpoint /tmp/covenantrix-verify -readonly; then
            echo "⚠️ WARNING: Failed to mount DMG - skipping verification"
            exit 0
          fi
          
          # Track issues
          ISSUES_FOUND=0
          
          # Check critical paths
          echo "Checking app structure..."
          ls -la /tmp/covenantrix-verify/ || true
          
          echo ""
          echo "=== Verification Results ==="
          
          # Check backend directory
          if [ ! -d "/tmp/covenantrix-verify/Covenantrix.app/Contents/Resources/backend" ]; then
            echo "❌ MISSING: Backend directory not found"
            ISSUES_FOUND=$((ISSUES_FOUND + 1))
          else
            echo "✓ Backend directory found"
            
            # Check backend main.py
            if [ ! -f "/tmp/covenantrix-verify/Covenantrix.app/Contents/Resources/backend/main.py" ]; then
              echo "❌ MISSING: backend/main.py not found"
              ISSUES_FOUND=$((ISSUES_FOUND + 1))
            else
              echo "✓ backend/main.py found"
            fi
            
            # Check .env file
            if [ ! -f "/tmp/covenantrix-verify/Covenantrix.app/Contents/Resources/backend/.env" ]; then
              echo "⚠️  WARNING: backend/.env not found (may cause runtime issues)"
            else
              echo "✓ backend/.env found"
            fi
          fi
          
          # Check python-dist directory
          if [ ! -d "/tmp/covenantrix-verify/Covenantrix.app/Contents/Resources/python-dist" ]; then
            echo "❌ MISSING: Python distribution not found"
            ISSUES_FOUND=$((ISSUES_FOUND + 1))
          else
            echo "✓ Python distribution directory found"
            
            # Check Python executable
            PYTHON_PATH="/tmp/covenantrix-verify/Covenantrix.app/Contents/Resources/python-dist/bin/python"
            if [ ! -f "$PYTHON_PATH" ]; then
              echo "❌ MISSING: Python executable not found at bin/python"
              ISSUES_FOUND=$((ISSUES_FOUND + 1))
            else
              echo "✓ Python executable found"
              
              # Check if Python is executable
              if [ ! -x "$PYTHON_PATH" ]; then
                echo "⚠️  WARNING: Python binary exists but is not executable (permissions issue)"
                ISSUES_FOUND=$((ISSUES_FOUND + 1))
              else
                echo "✓ Python executable has correct permissions"
              fi
            fi
            
            # Check python3 symlink
            if [ ! -f "/tmp/covenantrix-verify/Covenantrix.app/Contents/Resources/python-dist/bin/python3" ]; then
              echo "⚠️  WARNING: python3 executable not found"
            else
              echo "✓ python3 found"
            fi
          fi
          
          # Check libmagic directory (macOS specific)
          if [ ! -d "/tmp/covenantrix-verify/Covenantrix.app/Contents/Resources/lib" ]; then
            echo "❌ MISSING: lib directory not found (libmagic)"
            ISSUES_FOUND=$((ISSUES_FOUND + 1))
          else
            echo "✓ lib directory found"
            
            # Check for libmagic files
            if ! ls /tmp/covenantrix-verify/Covenantrix.app/Contents/Resources/lib/libmagic.* 1> /dev/null 2>&1; then
              echo "❌ MISSING: libmagic files not found"
              ISSUES_FOUND=$((ISSUES_FOUND + 1))
            else
              echo "✓ libmagic files found:"
              ls -la /tmp/covenantrix-verify/Covenantrix.app/Contents/Resources/lib/libmagic.* || true
            fi
          fi
          
          # Check magic database (CRITICAL FIX)
          if [ ! -d "/tmp/covenantrix-verify/Covenantrix.app/Contents/Resources/share/misc" ]; then
            echo "❌ MISSING: share/misc directory not found (magic database)"
            ISSUES_FOUND=$((ISSUES_FOUND + 1))
          else
            echo "✓ share/misc directory found"
            
            # Check for magic database file
            if [ ! -f "/tmp/covenantrix-verify/Covenantrix.app/Contents/Resources/share/misc/magic.mgc" ] && \
               [ ! -f "/tmp/covenantrix-verify/Covenantrix.app/Contents/Resources/share/misc/magic" ]; then
              echo "❌ MISSING: magic database file not found"
              ISSUES_FOUND=$((ISSUES_FOUND + 1))
            else
              echo "✓ magic database found:"
              ls -lh /tmp/covenantrix-verify/Covenantrix.app/Contents/Resources/share/misc/ || true
            fi
          fi
          
          # Unmount
          hdiutil detach /tmp/covenantrix-verify || true
          
          echo ""
          echo "=== Verification Summary ==="
          if [ $ISSUES_FOUND -eq 0 ]; then
            echo "✅ All critical components verified successfully"
          else
            echo "⚠️  Found $ISSUES_FOUND issue(s) - app may not function correctly"
            echo "Review the logs above for details"
          fi
      
      - name: List Build Output
        shell: bash
        run: |
          echo "=== Build Output ==="
          ls -la covenantrix-desktop/dist/release/ || echo "No release directory"
          find covenantrix-desktop/dist/release/ -type f \( -name "*.exe" -o -name "*.dmg" \) || echo "No installers"
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: covenantrix-${{ matrix.platform }}
          path: |
            covenantrix-desktop/dist/release/*.exe
            covenantrix-desktop/dist/release/*.dmg
            covenantrix-desktop/dist/release/latest*.yml
          retention-days: 30
          if-no-files-found: error

  # === RELEASE ===
  
  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: Prepare Release Files
        run: |
          mkdir -p release-files
          find artifacts/ -name "*.exe" -exec cp {} release-files/ \;
          find artifacts/ -name "*.dmg" -exec cp {} release-files/ \;
          find artifacts/ -name "latest*.yml" -exec cp {} release-files/ \;
          ls -la release-files/
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-files/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}